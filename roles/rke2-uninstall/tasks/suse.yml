---
# - name: Add required modules
#   modprobe:
#     name: "{{ item.name }}"
#     state: present
#   loop:
#     "{{ _module }}"
#   tags: rke2-uninstall

# - name: Setup required sysctl params
#   sysctl:
#     name: "{{ item.key }}"
#     value: "{{ item.value }}"
#     sysctl_set: yes
#     state: present
#     reload: yes
#   loop:
#     "{{ _sysctl }}"
#   tags: rke2-uninstall

# - name: Add repositories
#   zypper_repository:
#     state: present
#     repo: "{{ item.repo }}"
#   loop: "{{ _repo }}"
#   changed_when: false
#   tags: rke2-uninstall

# - name: Refresh repositories
#   zypper_repository:
#     repo: '*'
#     auto_import_keys: yes
#     runrefresh: yes
#   tags: rke2-uninstall

# - name: Update all packages
#   zypper:
#     name: '*'
#     state: latest
#     update_cache: yes
#   changed_when: false
#   ignore_errors: true
#   tags: rke2-uninstall

# - name: Install packages
#   zypper:
#     name: "{{ item.name }}"
#     state: "{{ item.state }}"
#     disable_gpg_check: yes
#     update_cache: yes
#     # extra_args: ''
#   loop: "{{ _package }}"
#   register: result
#   until: result is succeeded
#   tags: rke2-uninstall

# - name: just force systemd to reread configs
#   systemd:
#     daemon_reload: yes
#   tags: rke2-uninstall

# - name: Start and enable services
#   systemd:
#     name: "{{ item.name }}"
#     state: started
#     enabled: yes
#     daemon_reload: yes
#   loop: "{{ _service }}"
#   register: result
#   until: result is succeeded
#   tags: rke2-uninstall

# - name: Add /usr/local/bin to sudo secure_path
#   lineinfile:
#     line: 'Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin'
#     regexp: "Defaults(\s)*secure_path(\s)*="
#     state: present
#     insertafter: EOF
#     path: /etc/sudoers
#     validate: 'visudo -cf %s'
#   tags: rke2-uninstall

# - name: Download script
#   get_url:
#     url: "{{ item.url }}"
#     # checksum: "{{ item.checksum }}"
#     dest: "{{ item.dest }}"
#     owner: root
#     group: root
#     mode: 0755
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: rke2-uninstall

# - name: Execute script
#   shell: "{{ item.dest }}"
#   become: true
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: rke2-uninstall  shell: "{{ item.dest }}"

# - name: Remove script
#   file:
#     path: "{{ item.dest }}"
#     state: absent
#   loop: "{{ _install_script }}"
#   register: result
#   until: result is succeeded
#   tags: rke2-uninstall

- name: Execute pkill script
  shell: "{{ item.dest }}"
  become: true
  loop: "{{ _pkill_script }}"
  register: result
  ignore_errors: true
  # until: result is succeeded
  tags: rke2-uninstall

- name: Execute uninstall script
  shell: "{{ item.dest }}"
  become: true
  loop: "{{ _uninstall_script }}"
  register: result
  ignore_errors: true
  # until: result is succeeded
  tags: rke2-uninstall

- name: Remove file (delete file)
  file:
    path: ~{{ ansible_user }}/.kube/config
    state: absent
  tags: rke2-uninstall

- name: Recursively remove directory
  file:
    path: ~{{ ansible_user }}/.kube/
    state: absent
  tags: rke2-uninstall

- name: Remove local file (delete file)
  file:
    path: "{{ deployment_host.kube_config }}"
    state: absent
  delegate_to: localhost
  tags: rke2-uninstall
